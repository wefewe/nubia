#!/bin/bash
export PATH="/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin"

v2ray_systemctl() {
    if [ "$1" = "1" ];then
        if [ "$(pgrep "v2ray")" = "" ];then
            systemctl start v2ray.service
            systemctl enable v2ray.service
        else
            systemctl stop v2ray.service
            systemctl disable v2ray.service
        fi
    elif [ "$1" = "2" ];then
        systemctl restart v2ray.service
    fi > /dev/null 2>&1
    sleep 0.8
    clear
    pannel
}

koolproxy() {
    if [ "$(pgrep "koolproxy_i386")" = "" ];then
        systemctl start koolproxy.service
        systemctl enable koolproxy.service
    else
        systemctl stop koolproxy.service
        systemctl disable koolproxy.service
    fi > /dev/null 2>&1
    sleep 0.8
    clear
    pannel
}

uninstall() {
    echo && echo "回车继续"
    read
    systemctl stop v2ray.service
    systemctl disable v2ray.service
    systemctl stop koolproxy.service
    systemctl disable koolproxy.service
    rm -rf /bin/v2ray
    rm -f /etc/systemd/system/v2ray.service
    rm -f /bin/v2
    rm -f /etc/systemd/system/pdnsd.service
    rm -f /bin//bin/pdnsd
    rm -f /etc/systemd/system/koolproxy.service
    rm -f /bin/koolproxy
    sed -i '/v2 /d' /var/spool/cron/root
    clear
    echo " v2ray已停止并且已卸载"
    echo
}

connection() {
    clear
    if [ "$connection_total" = "0" ];then
        pannel
    else
        port=$(grep "port" /bin/v2ray/config.json | grep -Eo '[0-9]+')
        for L in ${port};do
            echo "${L}端口："
            connection_list=$(netstat -anp | grep "^tcp" | grep "${local_ip}:${L} " | awk '{print $5}' | grep -Eo "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | sort -u)
            for X in ${connection_list};do
                if [ -z "$(grep "${X} " /bin/v2ray/JZDH.txt)" ];then
                    ip_information=$(curl -s 'http://freeapi.ipip.net/'$X'' | sed 's/[[:punct:]]//g')
                    while [ -z ''${ip_information}'' ];do
                        ip_information=$(curl -s 'http://freeapi.ipip.net/'$X'' | sed 's/[[:punct:]]//g')
                        sleep 0.3
                    done
                    echo "${X} ${ip_information}" >> /bin/v2ray/JZDH.txt
                else
                    ip_information=$(grep "$X" /bin/v2ray/JZDH.txt | awk '{print $2}')
                fi
                printf "  \033[33m%-20s %-20s\033[0m\n" ${X} ${ip_information}
            done
            echo
        done
        pannel
    fi
}

vps_setting() {
    echo
    echo " 1.自动获取UUID更新"
    echo " 2.手动输入UUID更新"
    echo
    echo -e " 3.更换一号端口[\033[33m目前${first_port}端口\033[0m]"
    echo -e " 4.更换二号端口[\033[33m目前${second_port}端口\033[0m]"
    echo
    read -p "请选择：" uuid_choice
    if [ "${uuid_choice}" = "1" -o "${uuid_choice}" = "2" ];then
        UUID=$(cat /proc/sys/kernel/random/uuid)
        [ "${uuid_choice}" = "2" ] && echo && read -p "请输入UUID: " UUID
        [ -z "$UUID" ] || sed -i 's/'$uuid'/'$UUID'/g' /bin/v2ray/config.json
    elif [ "${uuid_choice}" = "3" ];then
        echo && read -p "请输入一号端口: " input_port
        [ -z "$input_port" ] || sed -i 's/ '$first_port',/ '$input_port',/g' /bin/v2ray/config.json
    elif [ "${uuid_choice}" = "4" ];then
        echo && read -p "请输入二号端口: " input_port
        [ -z "$input_port" ] || sed -i 's/ '$second_port',/ '$input_port',/g' /bin/v2ray/config.json
    fi
    [ ! -z "$uuid_choice" ] && [ ! -z "$(pgrep "v2ray")" ] && v2ray_systemctl 2
    clear && pannel
}

get_ip_information() {
    first_port=$(grep 'port' /bin/v2ray/config.json | grep -Eo '[0-9]+' | sed -n '1p')
    second_port=$(grep 'port' /bin/v2ray/config.json | grep -Eo '[0-9]+' | sed -n '2p')
    local_ip=$(ip addr | grep -Eo "inet[ ]*[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | grep -v "127.0.0.1" | grep -Eo "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*")
    connection_total=$(netstat -anp | grep "^tcp.*ESTABLISHED" | grep -E "${local_ip}:${first_port} |${local_ip}:${second_port} " | awk '{print $5}' | grep -Eo "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | sort -u | wc -l)
    if [ "$connection_total" = "0" ];then
        exit 0
    else
        port=$(grep "port" /bin/v2ray/config.json | grep -Eo '[0-9]+')
        for L in ${port};do
            connection_list=$(netstat -anp | grep "^tcp" | grep "${local_ip}:${L} " | awk '{print $5}' | grep -Eo "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | sort -u)
            for X in ${connection_list};do
                if [ -z "$(grep "${X} " /bin/v2ray/JZDH.txt)" ];then
                    ip_information=$(curl -s 'http://freeapi.ipip.net/'$X'' | sed 's/[[:punct:]]//g')
                    while [ -z ''${ip_information}'' ];do
                        ip_information=$(curl -s 'http://freeapi.ipip.net/'$X'' | sed 's/[[:punct:]]//g')
                        sleep 0.3
                    done
                    echo "${X} ${ip_information}" >> /bin/v2ray/JZDH.txt
                fi
            done
        done
    fi
}

dnsmasq() {
    if [ -f "/etc/systemd/system/DNS.service" ];then
        if [ -z "$(pgrep dnsmasq)" ];then
            systemctl start DNS.service
            systemctl enable DNS.service
        else
            systemctl stop DNS.service
            systemctl disable DNS.service
        fi
    else
        [ -f "/usr/bin/apt-get" ] && apt-get install dnsmasq -y && cp $(which dnsmasq) /bin/v2ray && apt-get remove dnsmasq -y
        [ -f "/usr/bin/yum" ] && yum install dnsmasq -y && cp $(which dnsmasq) /bin/v2ray && yum remove dnsmasq -y
        cat /bin/v2ray/DNS.service > /etc/systemd/system/DNS.service
        systemctl daemon-reload
        systemctl restart DNS.service
        systemctl enable DNS.service
    fi > /dev/null 2>&1
    sleep 0.8
    clear
    pannel
}

pannel() {
    #获取运行状态
    first_port=$(grep 'port' /bin/v2ray/config.json | grep -Eo '[0-9]+' | sed -n '1p')
    second_port=$(grep 'port' /bin/v2ray/config.json | grep -Eo '[0-9]+' | sed -n '2p')
    local_ip=$(ip addr | grep -Eo "inet[ ]*[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | grep -v "127.0.0.1" | grep -Eo "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*")
    connection_total=$(netstat -anp | grep "^tcp.*ESTABLISHED" | grep -E "${local_ip}:${first_port} |${local_ip}:${second_port} " | awk '{print $5}' | grep -Eo "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | sort -u | wc -l)
    uuid=$(grep '"id"' /bin/v2ray/config.json | awk -F '"id": "' '{print $2}' | awk -F '",' '{print $1}' | sort -u)
    alterId=$(grep 'alterId' /bin/v2ray/config.json | grep -Eo "[0-9]+" | sort -u)
    if [ ! -f "/bin/v2ray/JZDH.txt" ];then
        vps_information=$(curl -s https://api.myip.com/)
        echo $(echo $vps_information | grep -Eo '[0-9].*[0-9]') > /bin/v2ray/JZDH.txt
        echo $(echo $vps_information | awk -F '"cc":"' '{print $2}' | awk -F '"' '{print $1}') >> /bin/v2ray/JZDH.txt
    fi
    public_ip=$(cat /bin/v2ray/JZDH.txt | sed -n '1p')
    City=$(cat /bin/v2ray/JZDH.txt | sed -n '2p')
    v2rayNG=$(echo '{"add":"'$public_ip'","aid":"'$alterId'","host":"k.youku.com","id":"'$uuid'","net":"tcp","path":"http://k.youku.com/","port":"'$first_port'","ps":"'$City'","tls":"","type":"http","v":"2"}' | base64 | sed ':a;N;$!ba;s|\n||g' | sed 's|^|vmess://|g')

    #交互界面
    echo -e "v2rayNG: \033[33m${v2rayNG}\033[0m"
    echo
    [ -z "$(pgrep "v2ray")" ] && echo -e " 1.启动\033[31mV2Ray\033[0m \033[33m${public_ip}\033[0m"
    [ -z "$(pgrep "v2ray")" ] || echo -e " 1.关闭\033[32mV2Ray\033[0m \033[33m${public_ip}\033[0m"
    echo -e " 2.重启V2Ray \033[33m${uuid}\033[0m"
    echo -e " 3.卸载V2Ray"
    [ -z "$(pgrep "koolproxy_i386")" ] && echo " 4.开启KoolProxy去广告"
    [ -z "$(pgrep "koolproxy_i386")" ] || echo -e " 4.关闭\033[32mKoolProxy去广告\033[0m"
    [ -z "$(pgrep pdnsd_amd64)" ] && echo " 5.开启dnsmasq去广告"
    [ -z "$(pgrep pdnsd_amd64)" ] || echo -e " 5.关闭\033[32mdnsmasq去广告\033[0m 设置DNS为\033[33m${public_ip}\033[0m"
    echo -e " 6.更改UUID/更改端口 \033[33m${first_port}\033[0m/\033[33m${second_port}\033[0m"
    echo -e " 7.查看\033[33m${connection_total}台\033[0m已连接设备"
    echo && read -p "请选择: " pannel_choice

    #执行相应的操作
    [ "$pannel_choice" = "1" ] && v2ray_systemctl 1
    [ "$pannel_choice" = "2" ] && v2ray_systemctl 2
    [ "$pannel_choice" = "3" ] && uninstall
    [ "$pannel_choice" = "4" ] && koolproxy
    [ "$pannel_choice" = "5" ] && dnsmasq
    [ "$pannel_choice" = "6" ] && vps_setting
    [ "$pannel_choice" = "7" ] && connection
    clear && exit 0
}

chmod 777 -R /bin/v2ray
[ -z "$1" ] && clear && pannel
[ "$1" = "get" ] && get_ip_information
